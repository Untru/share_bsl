{
    "url": "https://api.github.com/gists/68ad18678eb3a58c6e67adb6b46a191e",
    "forks_url": "https://api.github.com/gists/68ad18678eb3a58c6e67adb6b46a191e/forks",
    "commits_url": "https://api.github.com/gists/68ad18678eb3a58c6e67adb6b46a191e/commits",
    "id": "68ad18678eb3a58c6e67adb6b46a191e",
    "node_id": "G_kwDOA5mHbtoAIDY4YWQxODY3OGViM2E1OGM2ZTY3YWRiNmI0NmExOTFl",
    "git_pull_url": "https://gist.github.com/68ad18678eb3a58c6e67adb6b46a191e.git",
    "git_push_url": "https://gist.github.com/68ad18678eb3a58c6e67adb6b46a191e.git",
    "html_url": "https://gist.github.com/Untru/68ad18678eb3a58c6e67adb6b46a191e",
    "files": {
        "ExternalDataProcessor.obj.bsl": {
            "filename": "ExternalDataProcessor.obj.bsl",
            "type": "text/plain",
            "language": "1C Enterprise",
            "raw_url": "https://gist.githubusercontent.com/Untru/68ad18678eb3a58c6e67adb6b46a191e/raw/59e66388830ce92a9b981a85aeb50e956723331c/ExternalDataProcessor.obj.bsl",
            "size": 44587,
            "truncated": false,
            "content": "#Область СлужебныйПрограммныйИнтерфейс\n\n#Область НастройкаИнтеграции\n\nФункция НоваяСтруктураНастроекИнтеграции() Экспорт\n\t\n\tНастройкиИнтеграции = Новый Структура();\n\t// Режим интеграции\n\tНастройкиИнтеграции.Вставить(\"Режим\");\n\t// Настройки режима \"Подключаемый модуль\"\n\tНастройкиИнтеграции.Вставить(\"ПодключаемыйМодуль_Версия\");\n\tНастройкиИнтеграции.Вставить(\"ПодключаемыйМодуль_Текст\");\n\tНастройкиИнтеграции.Вставить(\"ПодключаемыйМодуль_ОписаниеМетодов\");\n\t// Настройки режима \"Web-сервер\"\n\tНастройкиИнтеграции.Вставить(\"ВебСервер_УРЛ\");\n\tНастройкиИнтеграции.Вставить(\"ВебСервер_Логин\");\n\tНастройкиИнтеграции.Вставить(\"ВебСервер_Пароль\");\n\t// Дополнительные настройки\n\tНастройкиИнтеграции.Вставить(\"ПространствоИменXDTO\");\n\t\n\tВозврат(НастройкиИнтеграции);\n\t\nКонецФункции\n\nПроцедура АвтоопределениеНастроекИнтеграции(НастройкиИнтеграции) Экспорт\n\t\n\tСтандартныйМодуль = Метаданные.ОбщиеМодули.Найти(\"усТСДВебСервис\");\n\tЕсли СтандартныйМодуль <> Неопределено Тогда\n\t\tНастройкиИнтеграции.Режим = \"СтандартныйМодуль\";\n\t\tВозврат;\n\tКонецЕсли;\n\t\n\tНастройкиИнтеграции.Режим = \"ПодключаемыйМодуль\";\n\tВерсияШаблона = ПодобратьВерсиюШаблона();\n\t\n\tНастройкиИнтеграции.ПодключаемыйМодуль_Версия = ВерсияШаблона;\n\tНастройкиИнтеграции.ПодключаемыйМодуль_Текст = ШаблоныМодулей_ЗагрузитьТекстИзШаблона(ВерсияШаблона);\n\tНастройкиИнтеграции.ПодключаемыйМодуль_ОписаниеМетодов = ШаблоныМодулей_ОписаниеМетодовМодуля(НастройкиИнтеграции.ПодключаемыйМодуль_Текст);\n\t\nКонецПроцедуры\n\nПроцедура ПослеВосстановленияСохраненныхНастроекИнтеграции(НастройкиИнтеграции) Экспорт\n\t\n\tЕсли НастройкиИнтеграции.Режим = \"СтандартныйМодуль\" Тогда\n\t\t// Нет настроек\n\t\t\n\tИначеЕсли НастройкиИнтеграции.Режим = \"ПодключаемыйМодуль\" Тогда\n\t\tВосстановитьНастройкиПодключаемогоМодуля(НастройкиИнтеграции);\n\t\t\n\tИначеЕсли НастройкиИнтеграции.Режим = \"WebСервер\" Тогда\n\t\t// Нет настроек\n\t\t\n\tИначе\n\t\tВызватьИсключение \"Неизвестный режим интеграции!\";\n\tКонецЕсли;\n\t\nКонецПроцедуры\n\n#КонецОбласти\n\n#Область ШаблоныПодключаемыхМодулей\n\nФункция ШаблоныМодулей_ПолучитьСписокВерсий() Экспорт\n\t\n\tПрефиксМакета = ШаблоныМодулей_ПрефиксМакета();\n\tМассивВерсий = Новый Массив;\n\t\n\tМакеты = Метаданные().Макеты;\n\tДля Каждого Макет Из Макеты Цикл\n\t\tЕсли СтрНачинаетсяС(Макет.Имя, ПрефиксМакета) Тогда\n\t\t\tСтрокаВерсии = Сред(Макет.Имя, 1 + СтрДлина(ПрефиксМакета));\n\t\t\tСтрокаВерсии = СтрЗаменить(СтрокаВерсии, \"_\", \".\");\n\t\t\tМассивВерсий.Добавить(СтрокаВерсии);\n\t\tКонецЕсли;\n\tКонецЦикла;\n\t\n\tВозврат (МассивВерсий);\n\t\nКонецФункции\n\nФункция ШаблоныМодулей_ЗагрузитьТекстИзШаблона(ВерсияШаблона) Экспорт\n\t\n\tПрефиксМакета = ШаблоныМодулей_ПрефиксМакета();\n\t\n\tИмяМакетаШаблона = ПрефиксМакета + СтрЗаменить(ВерсияШаблона, \".\", \"_\");\n\t\n\tМакет = ПолучитьМакет(ИмяМакетаШаблона);\n\tТекстМодуля = Макет.ПолучитьТекст();\n\t\n\tВозврат (ТекстМодуля);\n\t\nКонецФункции\n\nФункция ШаблоныМодулей_ОписаниеМетодовМодуля(ТекстМодуля) Экспорт\n\t\n\tОписаниеПолейСтруктурыМетодов = \"ИмяМетода, КоличествоПараметров, ИмяПараметра1, ИмяПараметра2, ИмяПараметра3, ТелоМетода\";\n\tОписаниеМетодов = Новый Соответствие;\n\t\n\tМаркерНачалоФункции = \"ФУНКЦИЯ\";\n\tМаркерКонецФункции = \"КОНЕЦФУНКЦИИ\";\n\tМаркерВозврат = \"ВОЗВРАТ\";\n\tЗаменаВозврат = \"ВебСервис_Результат = \";\n\tДопСтрокаВозврат = \"Перейти ~ВЫХОД;\";\n\tМеткаВыходаИзФункции = \"~ВЫХОД:\";\n\t\n\tОписаниеМетода = Неопределено;\n\tСтрокиМетода = Неопределено;\n\t\n\tДля Каждого СтрокаКода Из СтрРазделить(ТекстМодуля, Символы.ПС) Цикл\n\t\t\n\t\tБуфер = СтрЗаменить(СтрокаКода, Символы.Таб, \" \");\n\t\tБуфер = СокрЛП(Буфер);\n\t\tБуфер = ВРег(Буфер);\n\t\t\n\t\tЕсли СтрНачинаетсяС(Буфер, МаркерНачалоФункции) Тогда\n\t\t\t\n\t\t\tОписаниеМетода = Новый Структура(ОписаниеПолейСтруктурыМетодов);\n\t\t\t\n\t\t\tБуфер = Сред(Буфер, СтрДлина(МаркерНачалоФункции) + 1);\n\t\t\tБуфер = СокрЛП(Буфер);\n\t\t\t\n\t\t\tЧастиСтроки = СтрРазделить(Буфер, \"()\");\n\t\t\tОписаниеМетода.ИмяМетода = ЧастиСтроки[0];\n\t\t\t\n\t\t\tПараметрыМетода = СтрРазделить(ЧастиСтроки[1], \",\", Ложь);\n\t\t\tОписаниеМетода.КоличествоПараметров = ПараметрыМетода.Количество();\n\t\t\tДля Сч = 1 По ОписаниеМетода.КоличествоПараметров Цикл\n\t\t\t\t\n\t\t\t\tИмяПараметра = СокрЛП(ПараметрыМетода[Сч - 1]);\n\t\t\t\tОписаниеМетода[\"ИмяПараметра\" + Сч] = ИмяПараметра;\n\t\t\t\t\n\t\t\tКонецЦикла;\n\t\t\t\n\t\t\tСтрокиМетода = Новый Массив;\n\t\t\t\n\t\tИначеЕсли СтрНачинаетсяС(Буфер, МаркерКонецФункции) Тогда\n\t\t\t\n\t\t\tСтрокиМетода.Добавить(МеткаВыходаИзФункции);\n\t\t\t\n\t\t\tОписаниеМетода.ТелоМетода = СтрСоединить(СтрокиМетода, Символы.ПС);\n\t\t\tОписаниеМетодов.Вставить(ОписаниеМетода.ИмяМетода, ОписаниеМетода);\n\t\t\t\n\t\t\tСтрокиМетода = Неопределено;\n\t\t\tОписаниеМетода = Неопределено;\n\t\t\t\n\t\tИначе\n\t\t\t\n\t\t\tЕсли СтрокиМетода = Неопределено Тогда\n\t\t\t\tПродолжить;\n\t\t\tКонецЕсли;\n\t\t\t\n\t\t\tБуфер = СтрЗаменить(СтрокаКода, Символы.Таб, \" \");\n\t\t\tБуфер = СокрЛП(Буфер);\n\t\t\tБуфер = ВРег(Буфер);\n\t\t\tЕсли СтрНачинаетсяС(Буфер, МаркерВозврат) Тогда\n\t\t\t\t\n\t\t\t\tБуфер = ЗаменаВозврат + Сред(Буфер, СтрДлина(МаркерВозврат) + 1);\n\t\t\t\tСтрокиМетода.Добавить(Буфер);\n\t\t\t\tСтрокиМетода.Добавить(ДопСтрокаВозврат);\n\t\t\t\t\n\t\t\tИначе\n\t\t\t\t\n\t\t\t\tСтрокиМетода.Добавить(СтрокаКода);\n\t\t\t\t\n\t\t\tКонецЕсли;\n\t\t\t\n\t\tКонецЕсли;\n\t\t\n\tКонецЦикла;\n\t\n\tВозврат (СериализацияJSON(ОписаниеМетодов));\n\t\nКонецФункции\n\n#КонецОбласти\n\n#Область ВызовВебСервиса\n\nФункция ПараметрыМетода(Параметр1 = Неопределено, Параметр2 = Неопределено, Параметр3 = Неопределено) Экспорт\n\t\n\tРезультат = Новый Массив;\n\tЕсли Параметр1 <> Неопределено Тогда\n\t\tРезультат.Добавить(Параметр1);\n\tКонецЕсли;\n\tЕсли Параметр2 <> Неопределено Тогда\n\t\tРезультат.Добавить(Параметр2);\n\tКонецЕсли;\n\tЕсли Параметр3 <> Неопределено Тогда\n\t\tРезультат.Добавить(Параметр3);\n\tКонецЕсли;\n\t\n\tВозврат Результат;\n\t\nКонецФункции\n\nФункция ВызватьМетодВебсервиса(КонтекстЭмулятора, ИмяМетода, ПараметрыМетода) Экспорт\n\t\n\tНастройкиИнтеграции = ПолучитьИзВременногоХранилища(КонтекстЭмулятора.ХранилищеПараметровИнтеграции);\n\t\n\tЕсли ИмяМетода = \"GetData\" Тогда\n\t\tПараметрыДоВызова = СохранитьЗначенияПараметров(ПараметрыМетода[1]);\n\tКонецЕсли;\n\t\n\tНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();\n\tЕсли НастройкиИнтеграции.Режим = \"СтандартныйМодуль\" Тогда\n\t\tРезультат = СтандартныйМодуль_ВызватьМетодВебСервиса(НастройкиИнтеграции, ИмяМетода, ПараметрыМетода);\n\t\t\n\tИначеЕсли НастройкиИнтеграции.Режим = \"ПодключаемыйМодуль\" Тогда\n\t\tРезультат = ПодключаемыйМодуль_ВызватьМетодВебСервиса(НастройкиИнтеграции, ИмяМетода, ПараметрыМетода);\n\t\t\n\tИначеЕсли НастройкиИнтеграции.Режим = \"WebСервер\" Тогда\n\t\tРезультат = ВебСервер_ВызватьМетодВебСервиса(НастройкиИнтеграции, ИмяМетода, ПараметрыМетода);\n\t\t\n\tИначе\n\t\tВызватьИсключение \"Неизвестный режим интеграции!\";\n\tКонецЕсли;\n\tДлительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало;\n\t\n\tЕсли ИмяМетода = \"GetData\" Тогда\n\t\tПараметрыПослеВызова = СохранитьЗначенияПараметров(Результат);\n\t\tИзмененныеПараметры = ВычислитьИзмененныеПараметры(ПараметрыДоВызова, ПараметрыПослеВызова);\n\tИначе\n\t\tИзмененныеПараметры = Неопределено;\n\tКонецЕсли;\n\t\n\tЗаписатьВызовВЖурналОтладки(КонтекстЭмулятора, ИмяМетода, ПараметрыМетода, Длительность, ИзмененныеПараметры);\n\t\n\tВозврат Результат;\n\t\nКонецФункции\n\n#КонецОбласти\n\n#Область ФабрикаXDTO\n\nФункция ЛокальнаяФабрикаXDTO(НастройкиИнтеграции) Экспорт\n\t\n\t// Внимание! Здесь небольшое волшебство.\n\t// Почему то, если брать системную ФабрикаXDTO - платформа начинает ругаться на отсутствие\n\t// некоторых свойств объектов. Ранее для обхода этого глюка я рекомендовал править схему \n\t// пакета XDTO. Но после некоторого количества раскопок, удалось выяснить, что достаточно\n\t// создать собственную фабрику и загрузить в нее схемы из системной - и вуаля! Ругаться \n\t// перестает. Почему, зачем, что там внутри при этом происходит - науке это неизвестно.\n\t//\n\t// Но это работает только для чтения полученных данных. При записи же возникает обратная\n\t// ситуация - системная фабрика успешно все записывает, а вот наша повторно созданная -\n\t// начинает глючить. Поэтому кое-где используется локальная фабрика, созданная этой функцией, \n\t// а кое где - системная Фабрика XDTO.\n\t\n\tНаборСхемXML = ФабрикаXDTO.ЭкспортСхемыXML(НастройкиИнтеграции.ПространствоИменXDTO);\n\tФабрика = Новый ФабрикаXDTO(НаборСхемXML);\n\t\n\tВозврат(Фабрика);\n\t\nКонецФункции\n\n#КонецОбласти\n\n#КонецОбласти\n\n#Область СлужебныеПроцедурыИФункции\n\n#Область НастройкаИнтеграции\n\nПроцедура ВосстановитьНастройкиПодключаемогоМодуля(НастройкиИнтеграции)\n\t\n\tВерсияШаблона = НастройкиИнтеграции.ПодключаемыйМодуль_Версия;\n\t\n\tЕсли ВерсияШаблона = \"РучнаяНастройка\" Тогда\n\t\t// Текст модуля уже находится в восстановленных настройках\n\t\t\n\tИначеЕсли ЗначениеЗаполнено(ВерсияШаблона) И ШаблоныМодулей_СуществуетШаблонДляВерсии(ВерсияШаблона) Тогда\n\t\tНастройкиИнтеграции.ПодключаемыйМодуль_Текст = ШаблоныМодулей_ЗагрузитьТекстИзШаблона(ВерсияШаблона);\n\t\t\n\tИначе\n\t\tВерсияШаблона = ПодобратьВерсиюШаблона();\n\t\tНастройкиИнтеграции.ПодключаемыйМодуль_Текст = ШаблоныМодулей_ЗагрузитьТекстИзШаблона(ВерсияШаблона);\n\t\tНастройкиИнтеграции.ПодключаемыйМодуль_Версия = ВерсияШаблона;\n\t\t\n\tКонецЕсли;\n\t\n\tНастройкиИнтеграции.ПодключаемыйМодуль_ОписаниеМетодов = ШаблоныМодулей_ОписаниеМетодовМодуля(НастройкиИнтеграции.ПодключаемыйМодуль_Текст);\n\t\nКонецПроцедуры\n\n#КонецОбласти\n\n#Область ЖурналОтладки\n\nПроцедура ЗаписатьВызовВЖурналОтладки(КонтекстЭмулятора, ИмяМетода, ПараметрыМетода, Длительность, ИзмененныеПараметры = Неопределено)\n\t\n\tЕсли ИмяМетода = \"StatusTSD\" Тогда\n\t\tВозврат;\n\tКонецЕсли;\n\t\t\n\tПараметрыОтладки = ПолучитьИзВременногоХранилища(КонтекстЭмулятора.ХранилищеПараметровОтладки);\n\tЕсли ПараметрыОтладки = Неопределено Тогда\n\t\tВозврат;\n\tКонецЕсли;\n\tЕсли Не ПараметрыОтладки.ОтладкаВключена Тогда\n\t\tВозврат;\n\tКонецЕсли;\n\t\n\tСтруктураЗаписи = Новый Структура();\n\tСтруктураЗаписи.Вставить(\"Время\", \t\t\tТекущаяДатаСеанса());\n\tСтруктураЗаписи.Вставить(\"Длительность\", \tДлительность);\n\tСтруктураЗаписи.Вставить(\"Тип\", \t\t\t\"Вызов\");\n\tСтруктураЗаписи.Вставить(\"Наименование\", \tИмяМетода);\n\tДля Сч = 1 По 3 Цикл\n\t\tЕсли ПараметрыМетода.Количество() >= Сч Тогда\n\t\t\tСтруктураЗаписи.Вставить(\"Параметр\" + Сч, Строка(ПараметрыМетода[Сч - 1]));\n\t\tИначе\n\t\t\tПрервать;\n\t\tКонецЕсли;\n\tКонецЦикла;\n\tСтруктураЗаписи.Вставить(\"ИзмененныеПараметры\", СериализацияJSON(ИзмененныеПараметры));\n\t\n\tПараметрыОтладки.Журнал.Вставить(0, СтруктураЗаписи);\n\tПараметрыОтладки.Версия = ПараметрыОтладки.Версия + 1;\n\t\n\tПоместитьВоВременноеХранилище(ПараметрыОтладки, КонтекстЭмулятора.ХранилищеПараметровОтладки);\n\t\nКонецПроцедуры\n\nФункция СохранитьЗначенияПараметров(Параметры)\n\t\n\tРезультат = Новый Структура;\n\tДля Каждого Значение Из Параметры.Item Цикл \n\t\tРезультат.Вставить(Значение.Name, Значение.Text);\n\tКонецЦикла;\n\t\n\tВозврат(Результат);\n\t\nКонецФункции\n\nФункция ВычислитьИзмененныеПараметры(ИсходныеПараметры, НовыеПараметры)\n\t\n\tСоответствиеПараметров = Новый Соответствие;\n\t\n\tДля Каждого ИсходныйПараметр Из ИсходныеПараметры Цикл\n\t\t\n\t\tЗначения = Новый Структура(\"Параметр, Старое, Новое\", ИсходныйПараметр.Ключ, ИсходныйПараметр.Значение);\n\t\tСоответствиеПараметров.Вставить(ИсходныйПараметр.Ключ, Значения);\n\t\t\n\tКонецЦикла;\n\t\n\tДля Каждого НовыйПараметр Из НовыеПараметры Цикл\n\t\tЕсли СоответствиеПараметров[НовыйПараметр.Ключ] = Неопределено Тогда\n\t\t\t\n\t\t\tЗначения = Новый Структура(\"Параметр, Старое, Новое\", НовыйПараметр.Ключ, , НовыйПараметр.Значение);\n\t\t\tСоответствиеПараметров.Вставить(НовыйПараметр.Ключ, Значения);\n\t\t\t\n\t\tИначе\n\t\t\t\n\t\t\tЗначения = СоответствиеПараметров[НовыйПараметр.Ключ];\n\t\t\tЗначения.Новое = НовыйПараметр.Значение;\n\t\t\t\n\t\tКонецЕсли;\n\tКонецЦикла;\n\t\n\tРезультат = Новый Массив;\n\tДля Каждого ПараметрИЗначения Из СоответствиеПараметров Цикл\n\t\t\n\t\tЕсли ПараметрИЗначения.Значение.Старое = ПараметрИЗначения.Значение.Новое Тогда\n\t\t\tПродолжить;\n\t\tКонецЕсли;\n\t\t\n\t\tРезультат.Добавить(ПараметрИЗначения.Значение);\n\t\t\n\tКонецЦикла;\n\t\n\tВозврат(Результат);\n\t\nКонецФункции\n\n#КонецОбласти\n\n#Область ШаблоныПодключаемыхМодулей\n\nФункция ШаблоныМодулей_ПрефиксМакета()\n\t\n\tВозврат (\"ПодключаемыйМодуль_\");\n\t\nКонецФункции\n\nФункция ПодобратьВерсиюШаблона()\n\n\tПоддерживаемыеВерсии = ШаблоныМодулей_ПолучитьСписокВерсий();\n\tВерсияТекущейКонфигурации = Метаданные.Версия;\n\t\n\tТаблицаВерсий = Новый ТаблицаЗначений();\n\tТаблицаВерсий.Колонки.Добавить(\"Версия\");\n\tТаблицаВерсий.Колонки.Добавить(\"ВерсияЧислом\");\n\tТаблицаВерсий.Колонки.Добавить(\"ТекущаяВерсия\");\n\t\n\tДля Каждого ПоддерживаемаяВерсия Из ПоддерживаемыеВерсии Цикл\n\t\t\n\t\tСтрокаВерсии = ТаблицаВерсий.Добавить();\n\t\tСтрокаВерсии.Версия = ПоддерживаемаяВерсия;\n\t\tСтрокаВерсии.ВерсияЧислом = ВерсияЧислом(ПоддерживаемаяВерсия);\n\t\tСтрокаВерсии.ТекущаяВерсия = Ложь;\n\t\t\n\tКонецЦикла;\n\t\n\tСтрокаВерсии = ТаблицаВерсий.Добавить();\n\tСтрокаВерсии.Версия = ВерсияТекущейКонфигурации;\n\tСтрокаВерсии.ВерсияЧислом = ВерсияЧислом(ВерсияТекущейКонфигурации);\n\tСтрокаВерсии.ТекущаяВерсия = Истина;\n\t\n\tТаблицаВерсий.Сортировать(\"ВерсияЧислом\");\n\tСтрокаТекущейВерсии = ТаблицаВерсий.Найти(Истина, \"ТекущаяВерсия\");\n\tИндексТекущейВерсии = ТаблицаВерсий.Индекс(СтрокаТекущейВерсии);\n\t\n\tЕсли ИндексТекущейВерсии <> (ТаблицаВерсий.Количество() - 1) Тогда\n\t\t\n\t\t// Мы не можем предсказать порядок одинаковых версйи при сортировке,\n\t\t// поэтому нужно проверить, нет ли строчкой выше той версии, которая\n\t\t// нам нужна.\n\t\tСледующаяВерсия = ТаблицаВерсий[ИндексТекущейВерсии + 1];\n\t\tЕсли СледующаяВерсия.ВерсияЧислом = СтрокаТекущейВерсии.ВерсияЧислом Тогда\n\t\t\tВозврат СледующаяВерсия.Версия;\n\t\tКонецЕсли;\n\t\t\n\tКонецЕсли;\n\t\n\tЕсли ИндексТекущейВерсии > 0 Тогда\n\t\t\n\t\t// Здесь предыдущая версия будет либо полным совпадением, либо наилучшим\n\t\t// вариантом. Т.к. обычно новые версии модуля загружаются для той версии,\n\t\t// в которых они был иизменены, нужно брать ближайшую версию сверху.\n\t\tПредыдущаяВерсия = ТаблицаВерсий[ИндексТекущейВерсии - 1];\n\t\tВозврат ПредыдущаяВерсия.Версия;\n\t\t\n\tКонецЕсли;\n\t\n\t// В отсутствие лучших вариантов, попробуем самую первую доступную версию\n\tВозврат ТаблицаВерсий[0].Версия;\n\nКонецФункции\n\nФункция ШаблоныМодулей_СуществуетШаблонДляВерсии(Версия)\n\t\n\tПрефиксМакета = ШаблоныМодулей_ПрефиксМакета();\n\tИмяМакетаШаблона = ПрефиксМакета + СтрЗаменить(Версия, \".\", \"_\");\n\t\n\tМакеты = Метаданные().Макеты;\n\tЕсли Макеты.Найти(ИмяМакетаШаблона) = Неопределено Тогда\n\t\tВозврат Ложь;\n\tКонецЕсли;\n\t\n\tВозврат Истина;\n\t\nКонецФункции\n\n#КонецОбласти\n\n#Область ВызовВебСервиса\n\nФункция СтандартныйМодуль_ВызватьМетодВебСервиса(НастройкиИнтеграции, ИмяМетода, ПараметрыМетода)\n\t\n\tМодуль = ОбщегоНазначения.ОбщийМодуль(\"усТСДВебСервис\");\n\tРезультат = ВычислитьЧерезМетодОбъекта(Модуль, ИмяМетода, ПараметрыМетода);\n\t\n\tВозврат Результат;\n\t\nКонецФункции\n\nФункция ПодключаемыйМодуль_ВызватьМетодВебСервиса(НастройкиИнтеграции, ИмяМетода, ПараметрыМетода)\n\t\n\tОписаниеМетодов = ДесериализацияJSON(НастройкиИнтеграции.ПодключаемыйМодуль_ОписаниеМетодов, , Истина);\n\tОписаниеМетода = ОписаниеМетодов[Врег(ИмяМетода)];\n\tЕсли ОписаниеМетода = Неопределено Тогда\n\t\tОписаниеОшибки = СтрШаблон(\n\t\t\"Ошибка интеграции с веб-сервисом TSD. Проверьте настройки веб-сервиса.\n\t\t|Подключаемый модуль: Вызов метода %1: Не найдено описание метода в подключаемом модуле\"\n\t\t, ИмяМетода);\n\t\tВызватьИсключение ОписаниеОшибки;\n\tКонецЕсли;\n\t\n\tСтрокиКодаВызова = Новый Массив;\n\tДля Сч = 1 По ОписаниеМетода[\"КоличествоПараметров\"] Цикл\n\t\t\n\t\tИндексПараметра = Сч - 1;\n\t\tИмяПараметра = ОписаниеМетода[\"ИмяПараметра\" + Сч];\n\t\tКодПрисвоенияПараметра = СтрШаблон(\"%1 = ПараметрыМетода[%2];\", ИмяПараметра, ИндексПараметра);\n\t\tСтрокиКодаВызова.Добавить(КодПрисвоенияПараметра);\n\t\t\n\tКонецЦикла;\n\t\n\tСтрокиКодаВызова.Добавить(ОписаниеМетода[\"ТелоМетода\"]);\t\n\tКодВызова = СтрСоединить(СтрокиКодаВызова, Символы.ПС);\n\t\n\tВебСервис_Результат = Неопределено;\n\t\n\t// Здесь конечно есть потенциальная уязвимость, т.к. текст ручной настройки подключаемого\n\t// модуля мжно ввести любой. Но выбора у нас нет - либо так, либо не получиться запустить \n\t// эмулятор в некоторых случаях.\n\t// BSLLS:ExecuteExternalCode-off\n\tВыполнить(КодВызова);\n\t// BSLLS:ExecuteExternalCode-on\n\t\n\tВозврат(ВебСервис_Результат);\n\t\nКонецФункции\n\nФункция ВебСервер_ВызватьМетодВебСервиса(НастройкиИнтеграции, ИмяМетода, ПараметрыМетода)\n\t\n\tУРЛ = ДополнитьУРЛ(НастройкиИнтеграции.ВебСервер_УРЛ);\n\tОпределение = Новый WSОпределения(УРЛ, НастройкиИнтеграции.ВебСервер_Логин, НастройкиИнтеграции.ВебСервер_Пароль, , 5);\n\tПрокси      = Новый WSПрокси(Определение, НастройкиИнтеграции.ПространствоИменXDTO, \"TSD\", \"TSDSoap12\", , 5);\n\tПрокси.Пользователь = НастройкиИнтеграции.ВебСервер_Логин;\n\tПрокси.Пароль       = НастройкиИнтеграции.ВебСервер_Пароль;\n\t\n\tРезультат = ВычислитьЧерезМетодОбъекта(Прокси, ИмяМетода, ПараметрыМетода);\n\t\n\t// В некоторых релизах WMS были ошибки в XDTO пакете, которые проявляются только в Эмуляторе\n\t// и только в режиме работы через веб-сервис. Это еще какая-то черная магия внутри платформы,\n\t// и я убил огромное количество времени пытаясь её обойти - безуспешно.\n\t// Потому в отдельной функции проверяем, есть ли в пакете известные нам ошибки и исправляем их\n\t// вручную.\n\tРезультат = ИсправитьОшибкиXDTOПакета(Результат, Определение.ФабрикаXDTO, НастройкиИнтеграции.ПространствоИменXDTO, ИмяМетода);\n\t\n\t// Результат десериализуется в неведомую зверушку, которая не совпадает по формату\n\t// с объектами внутреннего типа, генерируемыми при работе с модулем интеграции.\n\t// Для того, чтобы не разводить лапшу с \"Если Режим = ВебСервер Тогда\" здесь\n\t// делаем хитрость - повторно сериализуем и десериализуем уже с указанием внутреннего\n\t// типа. Помогает.\n\t\n\tЗаписьXML = Новый ЗаписьXML;\n\tЗаписьXML.УстановитьСтроку();\n\tФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Результат);\n\tСтрокаXML = ЗаписьXML.Закрыть();\n\t\n\tЧтениеXML = Новый ЧтениеXML;\n\tЧтениеXML.УстановитьСтроку(СтрокаXML);\n\tИмяТипаXDTO = ФабрикаXDTO.Тип(НастройкиИнтеграции.ПространствоИменXDTO, Результат.Тип().Имя);\n\tКонвертированныйРезультат = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ИмяТипаXDTO);\n\t\n\tВозврат КонвертированныйРезультат;\n\t\nКонецФункции\n\nФункция ИсправитьОшибкиXDTOПакета(Объект, Фабрика, ПространствоИмен, ИмяМетода)\n\t\n\tИсправитьОшибку501_wmsForm_PictureCollection(Объект, Фабрика, ПространствоИмен, ИмяМетода);\n\t\n\tВозврат Объект;\n\t\nКонецФункции\n\nФункция ИсправитьОшибку501_wmsForm_PictureCollection(Объект, Фабрика, ПространствоИмен, ИмяМетода)\n\t\n\t// Ошибка с незаполнением якобы обязательного поля PictureCollection в объекте wmsForm\n\t// Релиз 5.0.1\n\tЕсли ИмяМетода = \"GetForms\" Тогда\n\t\tФорма = Объект.Operation[0].Form[0];\n\tИначеЕсли ИмяМетода = \"GetDynamicForm\" Тогда\n\t\tФорма = Объект;\n\tИначеЕсли ИмяМетода = \"LoadFormByName\" Тогда\n\t\tФорма = Объект;\n\tИначе\n\t\tВозврат Объект; // Корректировать нечего\n\tКонецЕсли;\n\t\n\tЕсли Форма.Свойства().Получить(\"PictureCollection\") <> Неопределено Тогда // Есть такое свойство\n\t\tЕсли Форма.PictureCollection = Неопределено Тогда // Но оно не заполнено\n\t\t\tТипЗначенияPictureCollection = Фабрика.Тип(ПространствоИмен, \"wmsPictureCollection\");\n\t\t\tФорма.PictureCollection = Фабрика.Создать(ТипЗначенияPictureCollection);\n\t\tКонецЕсли;\t\t\t\n\tКонецЕсли;\n\t\n\tВозврат Объект;\n\t\nКонецФункции\n\nФункция ДополнитьУРЛ(УРЛ)\n\t\n\t// Варианты задания УРЛ\n\t// http://localhost/wms/ws/tsd.1cws?wsdl\n\t// http://localhost/wms/ws/tsd.1cws\n\t// http://localhost/wms/ws/tsd\n\t// http://localhost/wms/ws/\n\t// http://localhost/wms/ws\n\t// http://localhost/wms/\n\t// http://localhost/wms\n\t\n\tЕсли СтрЗаканчиваетсяНа(УРЛ, \"?wsdl\") Тогда\n\t\tРезультат = УРЛ;\n\t\t\n\tИначеЕсли СтрЗаканчиваетсяНа(УРЛ, \".1cws\") Тогда\n\t\tРезультат = УРЛ + \"?wsdl\";\n\t\t\n\tИначеЕсли СтрЗаканчиваетсяНа(УРЛ, \"tsd\") Тогда\n\t\tРезультат = УРЛ + \".1cws?wsdl\";\n\t\t\n\tИначеЕсли СтрЗаканчиваетсяНа(УРЛ, \"/ws/\") Тогда\n\t\tРезультат = УРЛ + \"tsd.1cws?wsdl\";\n\t\t\n\tИначеЕсли СтрЗаканчиваетсяНа(УРЛ, \"/ws\") Тогда\n\t\tРезультат = УРЛ + \"/tsd.1cws?wsdl\";\n\t\t\n\tИначеЕсли СтрЗаканчиваетсяНа(УРЛ, \"/\") Тогда\n\t\tРезультат = УРЛ + \"ws/tsd.1cws?wsdl\";\n\t\t\n\tИначе\n\t\tРезультат = УРЛ + \"/ws/tsd.1cws?wsdl\";\n\t\t\n\tКонецЕсли;\n\t\t\n\tВозврат Результат;\n\t\nКонецФункции\n\nФункция ВычислитьЧерезМетодОбъекта(Объект, ИмяМетода, ПараметрыМетода)\n\t\n\tПараметрыСтрокой = \"\";\n\tЕсли ПараметрыМетода <> Неопределено И ПараметрыМетода.Количество() > 0 Тогда\n\t\tДля Индекс = 0 По ПараметрыМетода.ВГраница() Цикл \n\t\t\tПараметрыСтрокой = ПараметрыСтрокой + \"ПараметрыМетода[\" + Индекс + \"],\";\n\t\tКонецЦикла;\n\t\tПараметрыСтрокой = Сред(ПараметрыСтрокой, 1, СтрДлина(ПараметрыСтрокой) - 1);\n\tКонецЕсли;\n\t\n\tСтрокаЗапуска = СтрШаблон(\"Объект.%1(%2)\", ИмяМетода, ПараметрыСтрокой);\n\t\n\t// Строка запуска сгенерирована нами самостоятельно и гарантировано безопасна.\n\t// BSLLS:ExecuteExternalCode-off\n\tРезультат = Вычислить(СтрокаЗапуска);\n\t// BSLLS:ExecuteExternalCode-on\n\t\n\tВозврат Результат;\n\t\nКонецФункции\n\n#КонецОбласти\n\nФункция ВерсияЧислом(Знач СтрокаВерсии)\n\t\n\tЧислоРазделовВерсии = 4;\t\t// Сколько разрядов мы ожидаем увидеть в строке версии\n\tМаксРазрядовВРазделеВерсии = 2; // Сколько цифр мы ожидаем увидеть в одном разряде\n\t\n\tСтрокаВерсии = ?(ПустаяСтрока(СтрокаВерсии), \"0.0.0.0\", СтрокаВерсии);\n\tВерсияМассивом = СтрРазделить(СтрокаВерсии, \".\");\n\tПока ВерсияМассивом.Количество() < ЧислоРазделовВерсии Цикл\n\t\tВерсияМассивом.Добавить(\"0\");\n\tКонецЦикла;\n\t\n\tРезультат = 0;\n\tОписаниеТиповЧисло = Новый ОписаниеТипов(\"Число\");\n\tДля Разряд = 1 По ЧислоРазделовВерсии Цикл\n\t\t\n\t\tОбратныйИндексРазряда = ЧислоРазделовВерсии - Разряд;\n\t\tРазрядЧислом = ОписаниеТиповЧисло.ПривестиЗначение(ВерсияМассивом[Разряд - 1]);\n\t\tВесРазряда = Pow(10, ОбратныйИндексРазряда * МаксРазрядовВРазделеВерсии);\n\t\tРезультат = Результат + (РазрядЧислом * ВесРазряда);\n\t\t\n\tКонецЦикла;\n\t\n\tВозврат Результат;\n\t\nКонецФункции\n\n// Копия функции БСП, скопирована для снижения связности\n// Разбивает строку на несколько строк по указанному разделителю. Разделитель может иметь любую длину.\n// В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,\n// рекомендуется использовать функцию платформы СтрРазделить.\n//\n// Параметры:\n//  Значение               - Строка - текст с разделителями;\n//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;\n//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.\n//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:\n//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки\n//       включаются в результат;\n//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в\n//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение \"\" (пустая строка), а\n//       при других разделителях результатом функции будет пустой массив.\n//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.\n//\n// Возвращаемое значение:\n//  Массив - массив строк.\n//\n// Пример:\n//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(\",один,,два,\", \",\")\n//  - возвратит массив из 5 элементов, три из которых  - пустые: \"\", \"один\", \"\", \"два\", \"\";\n//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(\",один,,два,\", \",\", Истина)\n//  - возвратит массив из двух элементов: \"один\", \"два\";\n//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(\" один   два  \", \" \")\n//  - возвратит массив из двух элементов: \"один\", \"два\";\n//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(\"\")\n//  - возвратит пустой массив;\n//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(\"\",,Ложь)\n//  - возвратит массив с одним элементом: \"\"(пустая строка);\n//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(\"\", \" \")\n//  - возвратит массив с одним элементом: \"\" (пустая строка).\n//\nФункция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = \",\", Знач ПропускатьПустыеСтроки = Неопределено,\n\t\tСокращатьНепечатаемыеСимволы = Ложь) Экспорт\n\t\n\tЕсли Разделитель = \",\"\n\t\tИ ПропускатьПустыеСтроки = Неопределено\n\t\tИ СокращатьНепечатаемыеСимволы Тогда\n\t\t\n\t\tРезультат = СтрРазделить(Значение, \",\", Ложь);\n\t\tДля Индекс = 0 По Результат.ВГраница() Цикл\n\t\t\tРезультат[Индекс] = СокрЛП(Результат[Индекс]);\n\t\t\tКонецЦикла;\n\t\tВозврат Результат;\n\t\t\n\tКонецЕсли;\n\t\n\tРезультат = Новый Массив;\n\t\n\t// Для обеспечения обратной совместимости.\n\tЕсли ПропускатьПустыеСтроки = Неопределено Тогда\n\t\tПропускатьПустыеСтроки = ?(Разделитель = \" \", Истина, Ложь);\n\t\tЕсли ПустаяСтрока(Значение) Тогда\n\t\t\tЕсли Разделитель = \" \" Тогда\n\t\t\t\tРезультат.Добавить(\"\");\n\t\t\tКонецЕсли;\n\t\t\tВозврат Результат;\n\t\tКонецЕсли;\n\tКонецЕсли;\n\t//\n\t\n\tПозиция = СтрНайти(Значение, Разделитель);\n\tПока Позиция > 0 Цикл\n\t\tПодстрока = Лев(Значение, Позиция - 1);\n\t\tЕсли Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда\n\t\t\tЕсли СокращатьНепечатаемыеСимволы Тогда\n\t\t\t\tРезультат.Добавить(СокрЛП(Подстрока));\n\t\t\tИначе\n\t\t\t\tРезультат.Добавить(Подстрока);\n\t\t\tКонецЕсли;\n\t\tКонецЕсли;\n\t\tЗначение = Сред(Значение, Позиция + СтрДлина(Разделитель));\n\t\tПозиция = СтрНайти(Значение, Разделитель);\n\tКонецЦикла;\n\t\n\tЕсли Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда\n\t\tЕсли СокращатьНепечатаемыеСимволы Тогда\n\t\t\tРезультат.Добавить(СокрЛП(Значение));\n\t\tИначе\n\t\t\tРезультат.Добавить(Значение);\n\t\tКонецЕсли;\n\tКонецЕсли;\n\t\n\tВозврат Результат;\n\t\nКонецФункции\n\nФункция СериализацияJSON(Знач ИсходныйОбъект)\n\t\n\tЗаписьJSON = Новый ЗаписьJSON;\n\tЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));\n\tЗаписатьJSON(ЗаписьJSON, ИсходныйОбъект);\n\tРезультат_JSON = ЗаписьJSON.Закрыть();\n\t\n\tВозврат (Результат_JSON);\n\t\nКонецФункции\n\nФункция ДесериализацияJSON(Знач СтрокаJSON, Знач СвойстваСДатой = Неопределено, СчитатьВСоответствие = Ложь)\n\t\n\tЧтениеJSON = Новый ЧтениеJSON;\n\tЧтениеJSON.УстановитьСтроку(СтрокаJSON);\n\tСчитанныйОбъект = ПрочитатьJSON(ЧтениеJSON, СчитатьВСоответствие, СвойстваСДатой);\n\t\n\tВозврат (СчитанныйОбъект);\n\t\nКонецФункции\n\n#КонецОбласти",
            "encoding": "utf-8"
        },
        "Form.obj.bsl": {
            "filename": "Form.obj.bsl",
            "type": "text/plain",
            "language": "1C Enterprise",
            "raw_url": "https://gist.githubusercontent.com/Untru/68ad18678eb3a58c6e67adb6b46a191e/raw/c0d319ba09c434734e5afef3679da32f49e0bb85/Form.obj.bsl",
            "size": 1011,
            "truncated": false,
            "content": "#Область ОбработчикиСобытийФормы\n\n&НаСервере\nПроцедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)\n\t\n\tЭлементы.ТекстСообщения.Заголовок = Параметры.ТекстСообщения;\n\t\nКонецПроцедуры\n\n&НаКлиенте\nПроцедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)\n\t\n\tЕсли ИмяСобытия = \"НовоеСообщениеСтатуса\" И Источник = \"ЭмуляторТСД\" Тогда\n\t\t\n\t\tЭлементы.ТекстСообщения.Заголовок = Параметр;\n\t\t\n\tКонецЕсли;\t\n\t\nКонецПроцедуры\n\n#КонецОбласти\n\n#Область ОбработчикиКомандФормы\n\n&НаКлиенте\nПроцедура КомандаОК(Команда)\n\t\n\tЗакрыть();\n\t\nКонецПроцедуры\n\n#КонецОбласти",
            "encoding": "utf-8"
        }
    },
    "public": false,
    "created_at": "2025-07-02T20:57:56Z",
    "updated_at": "2025-07-02T20:57:57Z",
    "description": "Gist создан из 1С 02.07.2025 23:57:50",
    "comments": 0,
    "user": null,
    "comments_enabled": true,
    "comments_url": "https://api.github.com/gists/68ad18678eb3a58c6e67adb6b46a191e/comments",
    "owner": {
        "login": "Untru",
        "id": 60393326,
        "node_id": "MDQ6VXNlcjYwMzkzMzI2",
        "avatar_url": "https://avatars.githubusercontent.com/u/60393326?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Untru",
        "html_url": "https://github.com/Untru",
        "followers_url": "https://api.github.com/users/Untru/followers",
        "following_url": "https://api.github.com/users/Untru/following{/other_user}",
        "gists_url": "https://api.github.com/users/Untru/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Untru/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Untru/subscriptions",
        "organizations_url": "https://api.github.com/users/Untru/orgs",
        "repos_url": "https://api.github.com/users/Untru/repos",
        "events_url": "https://api.github.com/users/Untru/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Untru/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
    },
    "forks": [],
    "history": [
        {
            "user": {
                "login": "Untru",
                "id": 60393326,
                "node_id": "MDQ6VXNlcjYwMzkzMzI2",
                "avatar_url": "https://avatars.githubusercontent.com/u/60393326?v=4",
                "gravatar_id": "",
                "url": "https://api.github.com/users/Untru",
                "html_url": "https://github.com/Untru",
                "followers_url": "https://api.github.com/users/Untru/followers",
                "following_url": "https://api.github.com/users/Untru/following{/other_user}",
                "gists_url": "https://api.github.com/users/Untru/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/Untru/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/Untru/subscriptions",
                "organizations_url": "https://api.github.com/users/Untru/orgs",
                "repos_url": "https://api.github.com/users/Untru/repos",
                "events_url": "https://api.github.com/users/Untru/events{/privacy}",
                "received_events_url": "https://api.github.com/users/Untru/received_events",
                "type": "User",
                "user_view_type": "public",
                "site_admin": false
            },
            "version": "6130da4e57bfb0090998c9fe1e3f7e6f9213b309",
            "committed_at": "2025-07-02T20:57:56Z",
            "change_status": {
                "total": 805,
                "additions": 805,
                "deletions": 0
            },
            "url": "https://api.github.com/gists/68ad18678eb3a58c6e67adb6b46a191e/6130da4e57bfb0090998c9fe1e3f7e6f9213b309"
        }
    ],
    "truncated": false
}